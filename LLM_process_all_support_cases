{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d2b969a7-d093-44de-a99e-76f7d382e945",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n",
      "\u001b[0m\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.3.2\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.2\u001b[0m\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "%pip install -r /root/tccpa_ticket_summary_daily/requirements.txt -q"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cf6930ec-8486-44a9-bffb-6f0e0b99f706",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import re\n",
    "import sys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8dcb412e-0bd6-4225-beeb-dc5b37c530db",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.8/site-packages/snowflake/sqlalchemy/base.py:1068: SAWarning: The GenericFunction 'flatten' is already registered and is going to be overridden.\n",
      "  functions.register_function(\"flatten\", flatten)\n",
      "2024-10-22 13:31:09,011 - INFO - SnowflakeConnector module imported successfully\n"
     ]
    }
   ],
   "source": [
    "sys.path.append('/root/_snowflake_connector') # CHANGE THE PATH TO BE WHERE THE snowflake_connector.py IS LOCATED\n",
    "from snowflake_connector import SnowflakeConnector #NEED snowflake_connector.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ac9c2dd4-c0d5-4ce7-9aeb-3de6f99448ec",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-10-22 13:31:09,026 - INFO - Initializing SnowflakeConnector\n",
      "2024-10-22 13:31:09,029 - INFO - Attempting to load private key from /root/privkey\n",
      "2024-10-22 13:31:09,105 - INFO - Private key loaded successfully\n"
     ]
    }
   ],
   "source": [
    "# Initialize the connector\n",
    "connector = SnowflakeConnector(\n",
    "    passphrase='YOUR PASS PHRASE',\n",
    "    file_key='/root/privkey' # UPDATE YOUR DIRECTORY\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec78e983-14eb-4bd0-b443-aa6d7bf72421",
   "metadata": {},
   "source": [
    "## 1. Get All TCCPA Ticket Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6a4dcfde-bfda-4250-981f-08f9e0f90967",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-10-22 13:31:10,492 - INFO - Creating connection to PROD.SOURCE as elvis.liang@thomsonreuters.com\n",
      "2024-10-22 13:31:10,521 - INFO - Connection created successfully\n"
     ]
    }
   ],
   "source": [
    "# Create connections\n",
    "# YOUR SNOWFLAKE ROLE TO RUN QUERY\n",
    "engine_prod = connector.create_connection(\n",
    "    account='a206448_prod.us-east-1',\n",
    "    user='elvis.liang@thomsonreuters.com',\n",
    "    database='PROD',\n",
    "    schema='SOURCE',\n",
    "    warehouse='PROD_READONLY',\n",
    "    role='TR_ELVIS.LIANG@THOMSONREUTERS.COM' \n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ce384860-d455-4864-b758-d230745a1ee2",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# SNOWFLAKE SQL QUERY TO EXTRACT DATA\n",
    "sql_query = '''\n",
    "\n",
    "WITH PRODUCT_LOOKUP AS (\n",
    "    SELECT \n",
    "        DISTINCT\n",
    "        PRODUCTCODE,\n",
    "        PRODUCTDESCRIPTION AS PRODUCT_NAME,\n",
    "        SHORTDESCRIPTION,\n",
    "        b.DESCRIPTION AS PRODUCT_FAMILY,\n",
    "        b.PRODUCTGROUP\n",
    "    FROM PROD.SOURCE.FLASH_DBO_PRODUCT_VW                   a\n",
    "    INNER JOIN PROD.SOURCE.FLASH_DBO_PRODUCTCATEGORY_VW     b  ON a.PRODUCTCATEGORY = b.PRODUCTCATEGORY\n",
    "    WHERE PRODUCTDESCRIPTION IS NOT NULL\n",
    "),\n",
    "\n",
    "ALL_TICKET_DATA AS (\n",
    "    SELECT \n",
    "        DATE(b.STARTDATETIME) AS TICKET_START_DATE,\n",
    "        DATE(b.CLOSEDDATETIME) AS TICKET_CLOSE_DATE,\n",
    "        a.CREATEDATE AS ACTIVITYDATETIME,\n",
    "        a.TICKETID,\n",
    "        a.CALLID,\n",
    "        b.TOPICCODE,\n",
    "        b.SUBTOPICCODE,\n",
    "        b.FIRMID,\n",
    "        b.PRODUCTCODE,\n",
    "        CONCAT(TRIM(b.firmid),TRIM(b.productcode)) AS FIRM_PRODUCT,\n",
    "        PRODUCT_NAME,\n",
    "        PRODUCT_FAMILY,\n",
    "        SHORTDESCRIPTION,\n",
    "        PRODUCTGROUP,\n",
    "        CASE WHEN TICKETCATEGORY = 'P' THEN 'Support'\n",
    "             WHEN TICKETCATEGORY = 'C' THEN 'Customer Service'\n",
    "             WHEN TICKETCATEGORY = 'B' THEN 'Bug'\n",
    "             WHEN TICKETCATEGORY = 'L' THEN 'Lead' END AS TICKETCATEGORY,\n",
    "        TRIM(C.TOPICDESCRIPTION) AS TOPICDESCRIPTION,\n",
    "        CASE WHEN TICKETSTATUS = 'C' THEN 'Closed'\n",
    "             WHEN TICKETSTATUS = 'V' THEN 'Void'\n",
    "             WHEN TICKETSTATUS = 'O' THEN 'Open' END AS TICKETSTATUS,\n",
    "        TRIM(ACTIVITYNOTE) AS ACTIVITYNOTE\n",
    "    FROM PROD.SOURCE.FLASH_DBO_TICKETACTIVITY_VW           a\n",
    "    INNER JOIN PROD.SOURCE.FLASH_DBO_TICKET_VW             b   ON TRIM(a.ticketid) = TRIM(b.ticketid)  \n",
    "    INNER JOIN PROD.SOURCE.FLASH_DBO_TOPIC_VW              c   ON TRIM(b.topiccode) = TRIM(c.topiccode)\n",
    "    INNER JOIN PRODUCT_LOOKUP                              e   ON TRIM(b.productcode) = TRIM(e.PRODUCTCODE)\n",
    "    WHERE DATE(b.STARTDATETIME) >= '2024-08-01' AND PRODUCTGROUP = 'GOSYS'\n",
    "\n",
    "    UNION ALL\n",
    "\n",
    "    SELECT \n",
    "        DATE(b.STARTDATETIME) AS TICKET_START_DATE,\n",
    "        DATE(b.CLOSEDDATETIME) AS TICKET_CLOSE_DATE,\n",
    "        a.CREATEDATE AS ACTIVITYDATETIME,\n",
    "        a.TICKETID,\n",
    "        a.CALLID,\n",
    "        b.TOPICCODE,\n",
    "        b.SUBTOPICCODE,\n",
    "        b.FIRMID,\n",
    "        b.PRODUCTCODE,\n",
    "        CONCAT(TRIM(b.firmid),TRIM(b.productcode)) AS FIRM_PRODUCT,\n",
    "        PRODUCT_NAME,\n",
    "        PRODUCT_FAMILY,\n",
    "        SHORTDESCRIPTION,\n",
    "        PRODUCTGROUP,\n",
    "        CASE WHEN TICKETCATEGORY = 'P' THEN 'Support'\n",
    "             WHEN TICKETCATEGORY = 'C' THEN 'Customer Service'\n",
    "             WHEN TICKETCATEGORY = 'B' THEN 'Bug'\n",
    "             WHEN TICKETCATEGORY = 'L' THEN 'Lead' END AS TICKETCATEGORY,\n",
    "        TRIM(C.TOPICDESCRIPTION) AS TOPICDESCRIPTION,\n",
    "        CASE WHEN TICKETSTATUS = 'C' THEN 'Closed'\n",
    "             WHEN TICKETSTATUS = 'V' THEN 'Void'\n",
    "             WHEN TICKETSTATUS = 'O' THEN 'Open' END AS TICKETSTATUS,\n",
    "        TRIM(ACTIVITYNOTE) AS ACTIVITYNOTE\n",
    "    FROM PROD.SOURCE.FLASH_DBO_TICKETACTIVITYARCHIVE_VW           a\n",
    "    INNER JOIN PROD.SOURCE.FLASH_DBO_TICKETARCHIVE_VW             b   ON TRIM(a.ticketid) = TRIM(b.ticketid)  \n",
    "    INNER JOIN PROD.SOURCE.FLASH_DBO_TOPIC_VW                     c   ON TRIM(b.topiccode) = TRIM(c.topiccode)\n",
    "    INNER JOIN PRODUCT_LOOKUP                                     e   ON TRIM(b.productcode) = TRIM(e.PRODUCTCODE)\n",
    "    WHERE DATE(b.STARTDATETIME) >= '2024-08-01' AND PRODUCTGROUP = 'GOSYS'\n",
    "\n",
    "    UNION ALL\n",
    "\n",
    "    SELECT \n",
    "        DATE(b.STARTDATETIME) AS TICKET_START_DATE,\n",
    "        DATE(b.CLOSEDDATETIME) AS TICKET_CLOSE_DATE,\n",
    "        a.CREATEDATE AS ACTIVITYDATETIME,\n",
    "        a.TICKETID,\n",
    "        a.CALLID,\n",
    "        b.TOPICCODE,\n",
    "        b.SUBTOPICCODE,\n",
    "        b.FIRMID,\n",
    "        b.PRODUCTCODE,\n",
    "        CONCAT(TRIM(b.firmid),TRIM(b.productcode)) AS FIRM_PRODUCT,\n",
    "        PRODUCT_NAME,\n",
    "        PRODUCT_FAMILY,\n",
    "        SHORTDESCRIPTION,\n",
    "        PRODUCTGROUP,\n",
    "        CASE WHEN TICKETCATEGORY = 'P' THEN 'Support'\n",
    "             WHEN TICKETCATEGORY = 'C' THEN 'Customer Service'\n",
    "             WHEN TICKETCATEGORY = 'B' THEN 'Bug'\n",
    "             WHEN TICKETCATEGORY = 'L' THEN 'Lead' END AS TICKETCATEGORY,\n",
    "        TRIM(C.TOPICDESCRIPTION) AS TOPICDESCRIPTION,\n",
    "        CASE WHEN TICKETSTATUS = 'C' THEN 'Closed'\n",
    "             WHEN TICKETSTATUS = 'V' THEN 'Void'\n",
    "             WHEN TICKETSTATUS = 'O' THEN 'Open' END AS TICKETSTATUS,\n",
    "        TRIM(ACTIVITYNOTE) AS ACTIVITYNOTE\n",
    "    FROM PROD.SOURCE.FLASH_DBO_TICKETACTIVITY_HIST_VW           a\n",
    "    INNER JOIN PROD.SOURCE.FLASH_DBO_TICKET_HIST_VW             b   ON TRIM(a.ticketid) = TRIM(b.ticketid)  \n",
    "    INNER JOIN PROD.SOURCE.FLASH_DBO_TOPIC_VW              c   ON TRIM(b.topiccode) = TRIM(c.topiccode)\n",
    "    INNER JOIN PRODUCT_LOOKUP                              e   ON TRIM(b.productcode) = TRIM(e.PRODUCTCODE)\n",
    "    WHERE DATE(b.STARTDATETIME) >= '2024-08-01' AND PRODUCTGROUP = 'GOSYS'\n",
    "\n",
    "    UNION ALL\n",
    "\n",
    "    SELECT \n",
    "        DATE(b.STARTDATETIME) AS TICKET_START_DATE,\n",
    "        DATE(b.CLOSEDDATETIME) AS TICKET_CLOSE_DATE,\n",
    "        a.CREATEDATE AS ACTIVITYDATETIME,\n",
    "        a.TICKETID,\n",
    "        a.CALLID,\n",
    "        b.TOPICCODE,\n",
    "        b.SUBTOPICCODE,\n",
    "        b.FIRMID,\n",
    "        b.PRODUCTCODE,\n",
    "        CONCAT(TRIM(b.firmid),TRIM(b.productcode)) AS FIRM_PRODUCT,\n",
    "        PRODUCT_NAME,\n",
    "        PRODUCT_FAMILY,\n",
    "        SHORTDESCRIPTION,\n",
    "        PRODUCTGROUP,\n",
    "        CASE WHEN TICKETCATEGORY = 'P' THEN 'Support'\n",
    "             WHEN TICKETCATEGORY = 'C' THEN 'Customer Service'\n",
    "             WHEN TICKETCATEGORY = 'B' THEN 'Bug'\n",
    "             WHEN TICKETCATEGORY = 'L' THEN 'Lead' END AS TICKETCATEGORY,\n",
    "        TRIM(C.TOPICDESCRIPTION) AS TOPICDESCRIPTION,\n",
    "        CASE WHEN TICKETSTATUS = 'C' THEN 'Closed'\n",
    "             WHEN TICKETSTATUS = 'V' THEN 'Void'\n",
    "             WHEN TICKETSTATUS = 'O' THEN 'Open' END AS TICKETSTATUS,\n",
    "        TRIM(ACTIVITYNOTE) AS ACTIVITYNOTE\n",
    "    FROM PROD.SOURCE.FLASH_DBO_TICKETACTIVITYARCHIVE_HIST_VW           a\n",
    "    INNER JOIN PROD.SOURCE.FLASH_DBO_TICKETARCHIVE_HIST_VW             b   ON TRIM(a.ticketid) = TRIM(b.ticketid)  \n",
    "    INNER JOIN PROD.SOURCE.FLASH_DBO_TOPIC_VW                     c   ON TRIM(b.topiccode) = TRIM(c.topiccode)\n",
    "    INNER JOIN PRODUCT_LOOKUP                                     e   ON TRIM(b.productcode) = TRIM(e.PRODUCTCODE)\n",
    "    WHERE DATE(b.STARTDATETIME) >= '2024-08-01' AND PRODUCTGROUP = 'GOSYS' \n",
    ")\n",
    "\n",
    "SELECT \n",
    "    TICKET_START_DATE,\n",
    "    TICKET_CLOSE_DATE,\n",
    "    TICKETID,\n",
    "    MAX(CALLID) AS CALLID,\n",
    "    TOPICCODE,\n",
    "    SUBTOPICCODE,\n",
    "    FIRMID,\n",
    "    PRODUCTCODE,\n",
    "    FIRM_PRODUCT,\n",
    "    PRODUCT_NAME,\n",
    "    PRODUCT_FAMILY,\n",
    "    SHORTDESCRIPTION,\n",
    "    PRODUCTGROUP,\n",
    "    TICKETCATEGORY,\n",
    "    TOPICDESCRIPTION,\n",
    "    TICKETSTATUS,\n",
    "    LISTAGG(ACTIVITYNOTE, ' || ') WITHIN GROUP (ORDER BY ACTIVITYDATETIME) AS COMBINED_BODY\n",
    "FROM ALL_TICKET_DATA\n",
    "GROUP BY \n",
    "    TICKET_START_DATE,\n",
    "    TICKET_CLOSE_DATE,\n",
    "    TICKETID,\n",
    "    TOPICCODE,\n",
    "    SUBTOPICCODE,\n",
    "    FIRMID,\n",
    "    PRODUCTCODE,\n",
    "    FIRM_PRODUCT,\n",
    "    PRODUCT_NAME,\n",
    "    PRODUCT_FAMILY,\n",
    "    SHORTDESCRIPTION,\n",
    "    PRODUCTGROUP,\n",
    "    TICKETCATEGORY,\n",
    "    TOPICDESCRIPTION,\n",
    "    TICKETSTATUS\n",
    "\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "895ed4c4-ab2a-47b8-8d94-ac345435f6cc",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-10-22 13:31:12,493 - INFO - Executing SQL query\n",
      "2024-10-22 13:31:12,508 - INFO - Snowflake Connector for Python Version: 3.12.2, Python Version: 3.8.12, Platform: Linux-5.10.226-214.880.amzn2.x86_64-x86_64-with-glibc2.2.5\n",
      "2024-10-22 13:31:12,510 - INFO - Connecting to GLOBAL Snowflake domain\n",
      "2024-10-22 13:31:12,512 - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.\n",
      "2024-10-22 13:31:13,857 - INFO - Number of results in first chunk: 1\n",
      "2024-10-22 13:31:13,959 - INFO - Number of results in first chunk: 1\n",
      "2024-10-22 13:31:22,707 - INFO - Number of results in first chunk: 29\n",
      "2024-10-22 13:31:24,470 - INFO - Number of results in first chunk: 1\n",
      "2024-10-22 13:31:24,473 - INFO - Query executed successfully. Returned 5870 rows\n"
     ]
    }
   ],
   "source": [
    "df_all = connector.execute_query(engine_prod, sql_query)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "26e02a72-672f-4e7f-98b9-fcaf5c08254a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5870, 17)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_all.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16481593-ab6f-4b2b-86e3-989cea4e4112",
   "metadata": {},
   "source": [
    "## 2. Get All TCCPA Ticket Data from tccpa_ticket_summary_daily"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2daedc63-9143-4171-9ad7-767fecb7096e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-10-22 13:31:24,607 - INFO - Creating connection to MYDATASPACE.A208177_PRODUCT_ANALYTICS_DATA as elvis.liang@thomsonreuters.com\n",
      "2024-10-22 13:31:24,616 - INFO - Connection created successfully\n"
     ]
    }
   ],
   "source": [
    "# Create connections \n",
    "# YOUR SNOWFLAKE ROLE TO RUN QUERY, HERE IM USING PRODUCT ANALYTICS' MDS\n",
    "engine_mds = connector.create_connection(\n",
    "    account='a206448_prod.us-east-1',\n",
    "    user='elvis.liang@thomsonreuters.com', \n",
    "    database='MYDATASPACE',\n",
    "    schema='A208177_PRODUCT_ANALYTICS_DATA',\n",
    "    warehouse='PROD_READONLY',\n",
    "    role='A208177_PRODUCT_ANALYTICS_DATA_MDS_OWNER' \n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "443a4eac-49f8-4061-9624-ab6263835303",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "sql_query = '''\n",
    "\n",
    "SELECT * FROM MYDATASPACE.A208177_PRODUCT_ANALYTICS_DATA.YOUR_TABLE_NAME\n",
    "\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5e45e6df-746c-4e40-a0ee-5ecef81ce0ac",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-10-22 13:31:24,844 - INFO - Executing SQL query\n",
      "2024-10-22 13:31:24,845 - INFO - Snowflake Connector for Python Version: 3.12.2, Python Version: 3.8.12, Platform: Linux-5.10.226-214.880.amzn2.x86_64-x86_64-with-glibc2.2.5\n",
      "2024-10-22 13:31:24,848 - INFO - Connecting to GLOBAL Snowflake domain\n",
      "2024-10-22 13:31:24,849 - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.\n",
      "2024-10-22 13:31:25,345 - INFO - Number of results in first chunk: 1\n",
      "2024-10-22 13:31:25,434 - INFO - Number of results in first chunk: 1\n",
      "2024-10-22 13:31:26,427 - INFO - Number of results in first chunk: 16\n",
      "2024-10-22 13:31:27,370 - INFO - Number of results in first chunk: 1\n",
      "2024-10-22 13:31:27,371 - INFO - Query executed successfully. Returned 5480 rows\n"
     ]
    }
   ],
   "source": [
    "df_existing = connector.execute_query(engine_mds, sql_query)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6ee482e7-1efe-40c6-b8dd-d2a3cbe1998e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5480, 18)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_existing.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcc6f981-2b5c-46bd-9c9f-b092d4deeb48",
   "metadata": {},
   "source": [
    "## 3. Compare the data with the existing records in your existing table in MDS and process only the new data that is not already present in tccpa_ticket_summary_daily"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "cdd5e8af-dc92-44ff-a945-dee11e8405b9",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Perform an outer merge on 'id'\n",
    "merged_df = pd.merge(df_all, df_existing[['ticketid']], on='ticketid', how='left', indicator=True)\n",
    "\n",
    "# Create the new DataFrame df with rows where 'id' is only in df_all\n",
    "df = merged_df[merged_df['_merge'] == 'left_only'].drop(columns=['_merge'])\n",
    "\n",
    "# Reset the index if needed\n",
    "df = df.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a743291a-3d86-4861-b882-5b28cf3b0537",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(309, 17)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "496b7006-e6e6-457c-be0e-6c9d6922b904",
   "metadata": {
    "tags": []
   },
   "source": [
    "## 4. Claude 3.5 processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e1131aa9-7637-4f10-bcf6-544e86bebffd",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-10-22 13:31:27,903 - INFO - ClaudeBedrockCaller module imported successfully\n"
     ]
    }
   ],
   "source": [
    "sys.path.append('/root/tccpa_ticket_summary_daily') # CHANGE THE PATH TO BE WHERE THE ClaudeBedrockCaller.py IS LOCATED\n",
    "from ClaudeBedrockCaller import ClaudeBedrockCaller # NEED ClaudeBedrockCaller.py\n",
    "from model_config import MODEL_PARAMS #SETUP YOUR LLM PARAMETERS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6d74e417-9e07-48b0-9663-683a9d3eb3a2",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Claude 3.5\n",
    "claude_caller = ClaudeBedrockCaller()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1eec0332-6656-4416-80c5-f378e7ffe286",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ADJUST PROMPTS TO FIT YOUR NEEDS\n",
    "prompt_template = \"\"\"\n",
    "Please summarize the key issues from the client in the provided support case activitiy notes. Follow these rules in your response:\n",
    "Summarize only the client's issue(s) or blocker(s) into 1-2 points, don't exceed 2 points.\n",
    "If customers send any error code or warning code, you must include it in the summary.\n",
    "Include only the summary in your response, nothing else.\n",
    "Exclude any greetings or pleasantries from the conversation.\n",
    "Do not summarize the support agent's responses or actions.\n",
    "Avoid commenting on the client's demeanor or behavior.\n",
    "Your reponse should look like:\n",
    "1. The client was unable to create a DRL (Document Request List) for a specific taxpayer, with the process showing as \"in queue\" for a long time.\n",
    "2. After attempts to resolve, the client received a \"NewCCHException\" error when trying to generate the DRL.\n",
    "Your response should not look like:\n",
    "Based on the conversation, the key issues from the client can be summarized as:\n",
    "1. The client was unable to create a DRL (Document Request List) for a specific taxpayer, with the process showing as \"in queue\" for a long time.\n",
    "2. After attempts to resolve, the client received a \"NewCCHException\" error when trying to generate the DRL.\n",
    "Here is the customer issue: {combined_body}\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bc9feee6-864a-4350-8dce-8b402a24983c",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 309 rows\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 761.66 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 2.46 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 761.81 seconds\n"
     ]
    }
   ],
   "source": [
    "processed_df = claude_caller.process_dataframe(df = df, prompt_template = prompt_template)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2e70893f-d22e-4a8c-ae6e-b3e67b4017bb",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ticket_start_date</th>\n",
       "      <th>ticket_close_date</th>\n",
       "      <th>ticketid</th>\n",
       "      <th>callid</th>\n",
       "      <th>topiccode</th>\n",
       "      <th>subtopiccode</th>\n",
       "      <th>firmid</th>\n",
       "      <th>productcode</th>\n",
       "      <th>firm_product</th>\n",
       "      <th>product_name</th>\n",
       "      <th>product_family</th>\n",
       "      <th>shortdescription</th>\n",
       "      <th>productgroup</th>\n",
       "      <th>ticketcategory</th>\n",
       "      <th>topicdescription</th>\n",
       "      <th>ticketstatus</th>\n",
       "      <th>combined_body</th>\n",
       "      <th>processed_result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2024-10-18</td>\n",
       "      <td>2024-10-18</td>\n",
       "      <td>51827825</td>\n",
       "      <td>58194060</td>\n",
       "      <td>WKSTN</td>\n",
       "      <td>ADDIN</td>\n",
       "      <td>325616</td>\n",
       "      <td>GFRADVF</td>\n",
       "      <td>325616GFRADVF</td>\n",
       "      <td>GFR AdvanceFlow (includes 1 user)</td>\n",
       "      <td>GoFileRoom AdvanceFlow</td>\n",
       "      <td>GFR AdvanceFlow</td>\n",
       "      <td>GOSYS</td>\n",
       "      <td>Support</td>\n",
       "      <td>Workstation</td>\n",
       "      <td>Closed</td>\n",
       "      <td>SUBJECT: EM addin update  ERRORCODE:   DESCRIP...</td>\n",
       "      <td>1. The client needed assistance with the corre...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2024-10-16</td>\n",
       "      <td>2024-10-16</td>\n",
       "      <td>51820417</td>\n",
       "      <td>58188967</td>\n",
       "      <td>ENG</td>\n",
       "      <td>MOD</td>\n",
       "      <td>5569</td>\n",
       "      <td>GFRADVF</td>\n",
       "      <td>5569GFRADVF</td>\n",
       "      <td>GFR AdvanceFlow (includes 1 user)</td>\n",
       "      <td>GoFileRoom AdvanceFlow</td>\n",
       "      <td>GFR AdvanceFlow</td>\n",
       "      <td>GOSYS</td>\n",
       "      <td>Support</td>\n",
       "      <td>Engagement</td>\n",
       "      <td>Closed</td>\n",
       "      <td>SUBJECT: CANNOT ADD OR OPEN ENGAGEMENTS  ERROR...</td>\n",
       "      <td>1. Users are unable to see clients or forms af...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2024-10-16</td>\n",
       "      <td>2024-10-16</td>\n",
       "      <td>51820538</td>\n",
       "      <td>58189108</td>\n",
       "      <td>WRKPP</td>\n",
       "      <td>MOD</td>\n",
       "      <td>414295</td>\n",
       "      <td>GFRADVF</td>\n",
       "      <td>414295GFRADVF</td>\n",
       "      <td>GFR AdvanceFlow (includes 1 user)</td>\n",
       "      <td>GoFileRoom AdvanceFlow</td>\n",
       "      <td>GFR AdvanceFlow</td>\n",
       "      <td>GOSYS</td>\n",
       "      <td>Support</td>\n",
       "      <td>Workpapers</td>\n",
       "      <td>Closed</td>\n",
       "      <td>SUBJECT: Caller is reporting that the user can...</td>\n",
       "      <td>1. The user cannot access documents through th...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2024-10-18</td>\n",
       "      <td>2024-10-18</td>\n",
       "      <td>51824164</td>\n",
       "      <td>58193227</td>\n",
       "      <td>UTIL</td>\n",
       "      <td>SYNC</td>\n",
       "      <td>19063</td>\n",
       "      <td>GFILERM</td>\n",
       "      <td>19063GFILERM</td>\n",
       "      <td>GoFileRoom</td>\n",
       "      <td>GoFileRoom</td>\n",
       "      <td>GoFileRoom</td>\n",
       "      <td>GOSYS</td>\n",
       "      <td>Support</td>\n",
       "      <td>UTILITIES</td>\n",
       "      <td>Closed</td>\n",
       "      <td>Sachin Prabhakar:Bot: Hello?? I'm Triva (tree-...</td>\n",
       "      <td>1. The client updated the password for Lookup ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2024-10-21</td>\n",
       "      <td>2024-10-21</td>\n",
       "      <td>51828638</td>\n",
       "      <td>58194997</td>\n",
       "      <td>WRKPP</td>\n",
       "      <td>MOD</td>\n",
       "      <td>273167</td>\n",
       "      <td>GFRADVF</td>\n",
       "      <td>273167GFRADVF</td>\n",
       "      <td>GFR AdvanceFlow (includes 1 user)</td>\n",
       "      <td>GoFileRoom AdvanceFlow</td>\n",
       "      <td>GFR AdvanceFlow</td>\n",
       "      <td>GOSYS</td>\n",
       "      <td>Support</td>\n",
       "      <td>Workpapers</td>\n",
       "      <td>Closed</td>\n",
       "      <td>SUBJECT: Grouping Schedule  ERRORCODE: n/a  DE...</td>\n",
       "      <td>1. User's grouping schedule updates are not re...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  ticket_start_date ticket_close_date  ticketid    callid topiccode  \\\n",
       "0        2024-10-18        2024-10-18  51827825  58194060     WKSTN   \n",
       "1        2024-10-16        2024-10-16  51820417  58188967     ENG     \n",
       "2        2024-10-16        2024-10-16  51820538  58189108     WRKPP   \n",
       "3        2024-10-18        2024-10-18  51824164  58193227     UTIL    \n",
       "4        2024-10-21        2024-10-21  51828638  58194997     WRKPP   \n",
       "\n",
       "  subtopiccode  firmid productcode   firm_product  \\\n",
       "0        ADDIN  325616    GFRADVF   325616GFRADVF   \n",
       "1        MOD      5569    GFRADVF     5569GFRADVF   \n",
       "2        MOD    414295    GFRADVF   414295GFRADVF   \n",
       "3        SYNC    19063    GFILERM    19063GFILERM   \n",
       "4        MOD    273167    GFRADVF   273167GFRADVF   \n",
       "\n",
       "                        product_name          product_family shortdescription  \\\n",
       "0  GFR AdvanceFlow (includes 1 user)  GoFileRoom AdvanceFlow  GFR AdvanceFlow   \n",
       "1  GFR AdvanceFlow (includes 1 user)  GoFileRoom AdvanceFlow  GFR AdvanceFlow   \n",
       "2  GFR AdvanceFlow (includes 1 user)  GoFileRoom AdvanceFlow  GFR AdvanceFlow   \n",
       "3                         GoFileRoom              GoFileRoom       GoFileRoom   \n",
       "4  GFR AdvanceFlow (includes 1 user)  GoFileRoom AdvanceFlow  GFR AdvanceFlow   \n",
       "\n",
       "  productgroup ticketcategory topicdescription ticketstatus  \\\n",
       "0        GOSYS        Support      Workstation       Closed   \n",
       "1        GOSYS        Support       Engagement       Closed   \n",
       "2        GOSYS        Support       Workpapers       Closed   \n",
       "3        GOSYS        Support        UTILITIES       Closed   \n",
       "4        GOSYS        Support       Workpapers       Closed   \n",
       "\n",
       "                                       combined_body  \\\n",
       "0  SUBJECT: EM addin update  ERRORCODE:   DESCRIP...   \n",
       "1  SUBJECT: CANNOT ADD OR OPEN ENGAGEMENTS  ERROR...   \n",
       "2  SUBJECT: Caller is reporting that the user can...   \n",
       "3  Sachin Prabhakar:Bot: Hello?? I'm Triva (tree-...   \n",
       "4  SUBJECT: Grouping Schedule  ERRORCODE: n/a  DE...   \n",
       "\n",
       "                                    processed_result  \n",
       "0  1. The client needed assistance with the corre...  \n",
       "1  1. Users are unable to see clients or forms af...  \n",
       "2  1. The user cannot access documents through th...  \n",
       "3  1. The client updated the password for Lookup ...  \n",
       "4  1. User's grouping schedule updates are not re...  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "processed_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0dfd15e4-2632-449e-b6e8-af688b741599",
   "metadata": {},
   "source": [
    "## 5. Append (write) the new data to your existing table in MDS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59e44d45-b2cb-478a-b60f-2af2a9d2f358",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create connections\n",
    "# YOUR SNOWFLAKE ROLE TO RUN QUERY, HERE IM USING PRODUCT ANALYTICS' MDS\n",
    "engine_mds = connector.create_connection(\n",
    "    account='a206448_prod.us-east-1',\n",
    "    user='elvis.liang@thomsonreuters.com',\n",
    "    database='MYDATASPACE',\n",
    "    schema='A208177_PRODUCT_ANALYTICS_DATA',\n",
    "    warehouse='PROD_READONLY',\n",
    "    role='A208177_PRODUCT_ANALYTICS_DATA_MDS_OWNER'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "9c6d7c80-162b-4a00-9948-e71ec9c1d3df",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-10-22 13:44:10,349 - INFO - Writing 309 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-22 13:44:10,359 - INFO - Snowflake Connector for Python Version: 3.12.2, Python Version: 3.8.12, Platform: Linux-5.10.226-214.880.amzn2.x86_64-x86_64-with-glibc2.2.5\n",
      "2024-10-22 13:44:10,360 - INFO - Connecting to GLOBAL Snowflake domain\n",
      "2024-10-22 13:44:10,362 - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.\n",
      "2024-10-22 13:44:10,790 - INFO - Number of results in first chunk: 1\n",
      "2024-10-22 13:44:10,891 - INFO - Number of results in first chunk: 1\n",
      "2024-10-22 13:44:10,966 - INFO - Number of results in first chunk: 18\n",
      "2024-10-22 13:44:12,428 - INFO - Number of results in first chunk: 1\n",
      "2024-10-22 13:44:12,516 - INFO - Number of results in first chunk: 1\n",
      "2024-10-22 13:44:12,517 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n"
     ]
    }
   ],
   "source": [
    "## Write table to MDS\n",
    "connector.write_to_table(engine_mds, processed_df, 'YOUR_TABLE_NAME', if_exists='append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "797e6bc4-d254-4e41-bf38-9f3222fa296f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "596e57af-26f3-4bca-90f2-b17ad299d437",
   "metadata": {},
   "source": [
    "## FIRST TIME USE ONLY (To process data in batches, otherwise LLM API will timeout)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "0423178f-079d-4b6d-ae3f-41ba32583865",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "import math\n",
    "sys.path.append('/root/tccpa_ticket_summary_daily')\n",
    "from ClaudeBedrockCaller import ClaudeBedrockCaller\n",
    "from model_config import MODEL_PARAMS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "3bc1c3fa-ac15-4bc2-b8ed-d024d92d74d2",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Claude 3.5\n",
    "claude_caller = ClaudeBedrockCaller()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "ed1e9aa6-e4b3-4167-8863-0e4da2f60c43",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "prompt_template = \"\"\"\n",
    "Please summarize the key issues from the client in the provided support case activitiy notes. Follow these rules in your response:\n",
    "Summarize only the client's issue(s) or blocker(s) into 1-2 points, don't exceed 2 points.\n",
    "If customers send any error code or warning code, you must include it in the summary.\n",
    "Include only the summary in your response, nothing else.\n",
    "Exclude any greetings or pleasantries from the conversation.\n",
    "Do not summarize the support agent's responses or actions.\n",
    "Avoid commenting on the client's demeanor or behavior.\n",
    "Your reponse should look like:\n",
    "1. The client was unable to create a DRL (Document Request List) for a specific taxpayer, with the process showing as \"in queue\" for a long time.\n",
    "2. After attempts to resolve, the client received a \"NewCCHException\" error when trying to generate the DRL.\n",
    "Your response should not look like:\n",
    "Based on the conversation, the key issues from the client can be summarized as:\n",
    "1. The client was unable to create a DRL (Document Request List) for a specific taxpayer, with the process showing as \"in queue\" for a long time.\n",
    "2. After attempts to resolve, the client received a \"NewCCHException\" error when trying to generate the DRL.\n",
    "Here is the customer issue: {combined_body}\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6998f920-3a1c-46ea-a55b-279d9e0b531f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-10-11 18:00:35,719 - INFO - Creating connection to MYDATASPACE.A208177_PRODUCT_ANALYTICS_DATA as elvis.liang@thomsonreuters.com\n",
      "2024-10-11 18:00:35,724 - INFO - Connection created successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n",
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 86.83 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.74 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 86.86 seconds\n",
      "2024-10-11 18:02:02,592 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:02:02,594 - INFO - Snowflake Connector for Python Version: 3.12.2, Python Version: 3.8.12, Platform: Linux-5.10.225-213.878.amzn2.x86_64-x86_64-with-glibc2.2.5\n",
      "2024-10-11 18:02:02,595 - INFO - Connecting to GLOBAL Snowflake domain\n",
      "2024-10-11 18:02:02,598 - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.\n",
      "2024-10-11 18:02:03,099 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:02:03,204 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:02:03,587 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:02:04,482 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:02:04,559 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:02:04,560 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 1/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 84.02 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.68 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 84.04 seconds\n",
      "2024-10-11 18:03:28,608 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:03:28,703 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:03:29,727 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:03:29,815 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:03:29,817 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 2/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 85.04 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.70 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 85.07 seconds\n",
      "2024-10-11 18:04:54,888 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:04:55,001 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:04:56,021 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:04:56,098 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:04:56,099 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 3/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 90.39 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.81 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 90.42 seconds\n",
      "2024-10-11 18:06:26,516 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:06:26,653 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:06:28,045 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:06:28,131 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:06:28,132 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 4/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 76.84 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.54 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 76.87 seconds\n",
      "2024-10-11 18:07:45,006 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:07:45,104 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:07:46,006 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:07:46,085 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:07:46,086 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 5/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 85.24 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.70 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 85.26 seconds\n",
      "2024-10-11 18:09:11,354 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:09:11,505 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:09:12,773 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:09:12,864 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:09:12,865 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 6/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 91.80 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.84 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 91.83 seconds\n",
      "2024-10-11 18:10:44,699 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:10:44,777 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:10:45,845 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:10:45,943 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:10:45,944 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 7/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 76.74 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.53 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 76.77 seconds\n",
      "2024-10-11 18:12:02,716 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:12:02,795 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:12:03,762 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:12:03,827 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:12:03,828 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 8/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 82.18 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.64 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 82.21 seconds\n",
      "2024-10-11 18:13:26,041 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:13:26,151 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:13:27,095 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:13:27,166 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:13:27,167 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 9/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 92.63 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.85 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 92.65 seconds\n",
      "2024-10-11 18:14:59,825 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:14:59,933 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:15:01,009 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:15:01,072 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:15:01,076 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 10/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 92.97 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.86 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 93.00 seconds\n",
      "2024-10-11 18:16:34,077 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:16:34,179 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:16:35,197 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:16:35,294 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:16:35,294 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 11/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 92.81 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.86 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 92.83 seconds\n",
      "2024-10-11 18:18:08,133 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:18:08,229 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:18:09,470 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:18:09,540 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:18:09,541 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 12/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 86.61 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.73 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 86.64 seconds\n",
      "2024-10-11 18:19:36,187 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:19:36,265 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:19:37,410 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:19:37,470 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:19:37,471 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 13/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 83.90 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.68 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 83.93 seconds\n",
      "2024-10-11 18:21:01,401 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:21:01,518 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:21:02,761 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:21:02,829 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:21:02,831 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 14/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 86.02 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.72 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 86.04 seconds\n",
      "2024-10-11 18:22:28,876 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:22:28,997 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:22:30,015 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:22:30,075 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:22:30,076 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 15/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 79.60 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.59 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 79.62 seconds\n",
      "2024-10-11 18:23:49,708 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:23:49,801 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:23:50,955 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:23:51,021 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:23:51,022 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 16/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 84.75 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.69 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 84.78 seconds\n",
      "2024-10-11 18:25:15,806 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:25:15,894 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:25:17,010 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:25:17,072 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:25:17,074 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 17/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 88.06 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.76 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 88.09 seconds\n",
      "2024-10-11 18:26:45,168 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:26:45,272 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:26:46,561 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:26:46,638 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:26:46,639 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 18/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 80.40 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.61 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 80.43 seconds\n",
      "2024-10-11 18:28:07,069 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:28:07,164 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:28:08,450 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:28:08,520 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:28:08,521 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 19/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 87.42 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.75 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 87.45 seconds\n",
      "2024-10-11 18:29:35,973 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:29:36,063 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:29:37,207 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:29:37,276 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:29:37,278 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 20/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 86.47 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.73 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 86.50 seconds\n",
      "2024-10-11 18:31:03,779 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:31:03,879 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:31:05,314 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:31:05,443 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:31:05,445 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 21/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 85.37 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.71 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 85.39 seconds\n",
      "2024-10-11 18:32:30,842 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:32:30,961 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:32:31,912 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:32:31,974 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:32:31,975 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 22/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 90.30 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.81 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 90.33 seconds\n",
      "2024-10-11 18:34:02,307 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:34:02,404 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:34:03,738 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:34:03,801 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:34:03,803 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 23/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 88.38 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.77 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 88.40 seconds\n",
      "2024-10-11 18:35:32,212 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:35:32,309 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:35:33,554 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:35:33,620 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:35:33,623 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 24/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 88.77 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.78 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 88.80 seconds\n",
      "2024-10-11 18:37:02,433 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:37:02,532 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:37:03,872 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:37:03,961 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:37:03,962 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 25/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 97.12 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.94 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 97.15 seconds\n",
      "2024-10-11 18:38:41,113 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:38:41,204 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:38:42,440 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:38:42,512 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:38:42,513 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 26/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 91.86 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.84 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 91.89 seconds\n",
      "2024-10-11 18:40:14,410 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:40:14,498 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:40:15,464 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:40:15,591 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:40:15,593 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 27/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 84.26 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.69 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 84.29 seconds\n",
      "2024-10-11 18:41:39,882 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:41:39,960 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:41:40,907 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:41:41,008 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:41:41,010 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 28/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 77.95 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.56 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 77.97 seconds\n",
      "2024-10-11 18:42:58,983 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:42:59,056 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:43:00,173 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:43:00,237 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:43:00,238 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 29/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 90.23 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.80 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 90.25 seconds\n",
      "2024-10-11 18:44:30,496 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:44:30,605 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:44:31,439 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:44:31,510 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:44:31,512 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 30/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 90.27 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.81 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 90.29 seconds\n",
      "2024-10-11 18:46:01,809 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:46:01,908 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:46:02,874 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:46:02,950 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:46:02,951 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 31/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 78.91 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.58 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 78.93 seconds\n",
      "2024-10-11 18:47:21,887 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:47:21,989 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:47:22,834 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:47:22,903 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:47:22,904 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 32/106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/tccpa_ticket_summary_daily/ClaudeBedrockCaller.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['processed_result'] = processed_results\n",
      "ClaudeBedrockCaller - INFO - Total API call time: 86.47 seconds\n",
      "ClaudeBedrockCaller - INFO - Average API call time: 1.73 seconds\n",
      "ClaudeBedrockCaller - INFO - process_dataframe executed in 86.50 seconds\n",
      "2024-10-11 18:48:49,406 - INFO - Writing 50 rows to table af_gfr_ticket_summary_daily\n",
      "2024-10-11 18:48:49,491 - INFO - Number of results in first chunk: 18\n",
      "2024-10-11 18:48:50,395 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:48:50,462 - INFO - Number of results in first chunk: 1\n",
      "2024-10-11 18:48:50,465 - INFO - Data appended to af_gfr_ticket_summary_daily successfully\n",
      "ClaudeBedrockCaller - INFO - Starting to process dataframe with 50 rows\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed and wrote batch 33/106\n"
     ]
    }
   ],
   "source": [
    "# Calculate the number of batches\n",
    "batch_size = 50\n",
    "num_batches = math.ceil(len(df_all) / batch_size)\n",
    "\n",
    "# Create connections\n",
    "# YOUR SNOWFLAKE ROLE TO RUN QUERY, HERE IM USING PRODUCT ANALYTICS' MDS\n",
    "engine_mds = connector.create_connection(\n",
    "    account='a206448_prod.us-east-1',\n",
    "    user='elvis.liang@thomsonreuters.com',\n",
    "    database='MYDATASPACE',\n",
    "    schema='A208177_PRODUCT_ANALYTICS_DATA',\n",
    "    warehouse='PROD_READONLY',\n",
    "    role='A208177_PRODUCT_ANALYTICS_DATA_MDS_OWNER'\n",
    ")\n",
    "\n",
    "# Process the DataFrame in batches and write to table after each batch\n",
    "for i in range(num_batches):\n",
    "    start_idx = i * batch_size\n",
    "    end_idx = min((i + 1) * batch_size, len(df_all))\n",
    "    \n",
    "    # Get the current batch\n",
    "    batch_df = df_all.iloc[start_idx:end_idx]\n",
    "    \n",
    "    # Process the batch\n",
    "    processed_batch = claude_caller.process_dataframe(df=batch_df, prompt_template=prompt_template)\n",
    "    \n",
    "    # Write the processed batch to MDS\n",
    "    connector.write_to_table(engine_mds, processed_batch, 'YOUR_TABLE_NAME', if_exists='append')\n",
    "    \n",
    "    print(f\"Processed and wrote batch {i+1}/{num_batches}\")\n",
    "\n",
    "print(\"All batches have been processed and written to the table.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "992ada4d-a98a-4a6b-8020-d465b965c5f7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "availableInstances": [
   {
    "_defaultOrder": 0,
    "_isFastLaunch": true,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 4,
    "name": "ml.t3.medium",
    "vcpuNum": 2
   },
   {
    "_defaultOrder": 1,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 8,
    "name": "ml.t3.large",
    "vcpuNum": 2
   },
   {
    "_defaultOrder": 2,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 16,
    "name": "ml.t3.xlarge",
    "vcpuNum": 4
   },
   {
    "_defaultOrder": 3,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 32,
    "name": "ml.t3.2xlarge",
    "vcpuNum": 8
   },
   {
    "_defaultOrder": 4,
    "_isFastLaunch": true,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 8,
    "name": "ml.m5.large",
    "vcpuNum": 2
   },
   {
    "_defaultOrder": 5,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 16,
    "name": "ml.m5.xlarge",
    "vcpuNum": 4
   },
   {
    "_defaultOrder": 6,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 32,
    "name": "ml.m5.2xlarge",
    "vcpuNum": 8
   },
   {
    "_defaultOrder": 7,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 64,
    "name": "ml.m5.4xlarge",
    "vcpuNum": 16
   },
   {
    "_defaultOrder": 8,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 128,
    "name": "ml.m5.8xlarge",
    "vcpuNum": 32
   },
   {
    "_defaultOrder": 9,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 192,
    "name": "ml.m5.12xlarge",
    "vcpuNum": 48
   },
   {
    "_defaultOrder": 10,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 256,
    "name": "ml.m5.16xlarge",
    "vcpuNum": 64
   },
   {
    "_defaultOrder": 11,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 384,
    "name": "ml.m5.24xlarge",
    "vcpuNum": 96
   },
   {
    "_defaultOrder": 12,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 8,
    "name": "ml.m5d.large",
    "vcpuNum": 2
   },
   {
    "_defaultOrder": 13,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 16,
    "name": "ml.m5d.xlarge",
    "vcpuNum": 4
   },
   {
    "_defaultOrder": 14,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 32,
    "name": "ml.m5d.2xlarge",
    "vcpuNum": 8
   },
   {
    "_defaultOrder": 15,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 64,
    "name": "ml.m5d.4xlarge",
    "vcpuNum": 16
   },
   {
    "_defaultOrder": 16,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 128,
    "name": "ml.m5d.8xlarge",
    "vcpuNum": 32
   },
   {
    "_defaultOrder": 17,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 192,
    "name": "ml.m5d.12xlarge",
    "vcpuNum": 48
   },
   {
    "_defaultOrder": 18,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 256,
    "name": "ml.m5d.16xlarge",
    "vcpuNum": 64
   },
   {
    "_defaultOrder": 19,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 384,
    "name": "ml.m5d.24xlarge",
    "vcpuNum": 96
   },
   {
    "_defaultOrder": 20,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": true,
    "memoryGiB": 0,
    "name": "ml.geospatial.interactive",
    "supportedImageNames": [
     "sagemaker-geospatial-v1-0"
    ],
    "vcpuNum": 0
   },
   {
    "_defaultOrder": 21,
    "_isFastLaunch": true,
    "category": "Compute optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 4,
    "name": "ml.c5.large",
    "vcpuNum": 2
   },
   {
    "_defaultOrder": 22,
    "_isFastLaunch": false,
    "category": "Compute optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 8,
    "name": "ml.c5.xlarge",
    "vcpuNum": 4
   },
   {
    "_defaultOrder": 23,
    "_isFastLaunch": false,
    "category": "Compute optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 16,
    "name": "ml.c5.2xlarge",
    "vcpuNum": 8
   },
   {
    "_defaultOrder": 24,
    "_isFastLaunch": false,
    "category": "Compute optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 32,
    "name": "ml.c5.4xlarge",
    "vcpuNum": 16
   },
   {
    "_defaultOrder": 25,
    "_isFastLaunch": false,
    "category": "Compute optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 72,
    "name": "ml.c5.9xlarge",
    "vcpuNum": 36
   },
   {
    "_defaultOrder": 26,
    "_isFastLaunch": false,
    "category": "Compute optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 96,
    "name": "ml.c5.12xlarge",
    "vcpuNum": 48
   },
   {
    "_defaultOrder": 27,
    "_isFastLaunch": false,
    "category": "Compute optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 144,
    "name": "ml.c5.18xlarge",
    "vcpuNum": 72
   },
   {
    "_defaultOrder": 28,
    "_isFastLaunch": false,
    "category": "Compute optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 192,
    "name": "ml.c5.24xlarge",
    "vcpuNum": 96
   },
   {
    "_defaultOrder": 29,
    "_isFastLaunch": true,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 16,
    "name": "ml.g4dn.xlarge",
    "vcpuNum": 4
   },
   {
    "_defaultOrder": 30,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 32,
    "name": "ml.g4dn.2xlarge",
    "vcpuNum": 8
   },
   {
    "_defaultOrder": 31,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 64,
    "name": "ml.g4dn.4xlarge",
    "vcpuNum": 16
   },
   {
    "_defaultOrder": 32,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 128,
    "name": "ml.g4dn.8xlarge",
    "vcpuNum": 32
   },
   {
    "_defaultOrder": 33,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 4,
    "hideHardwareSpecs": false,
    "memoryGiB": 192,
    "name": "ml.g4dn.12xlarge",
    "vcpuNum": 48
   },
   {
    "_defaultOrder": 34,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 256,
    "name": "ml.g4dn.16xlarge",
    "vcpuNum": 64
   },
   {
    "_defaultOrder": 35,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 61,
    "name": "ml.p3.2xlarge",
    "vcpuNum": 8
   },
   {
    "_defaultOrder": 36,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 4,
    "hideHardwareSpecs": false,
    "memoryGiB": 244,
    "name": "ml.p3.8xlarge",
    "vcpuNum": 32
   },
   {
    "_defaultOrder": 37,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 8,
    "hideHardwareSpecs": false,
    "memoryGiB": 488,
    "name": "ml.p3.16xlarge",
    "vcpuNum": 64
   },
   {
    "_defaultOrder": 38,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 8,
    "hideHardwareSpecs": false,
    "memoryGiB": 768,
    "name": "ml.p3dn.24xlarge",
    "vcpuNum": 96
   },
   {
    "_defaultOrder": 39,
    "_isFastLaunch": false,
    "category": "Memory Optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 16,
    "name": "ml.r5.large",
    "vcpuNum": 2
   },
   {
    "_defaultOrder": 40,
    "_isFastLaunch": false,
    "category": "Memory Optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 32,
    "name": "ml.r5.xlarge",
    "vcpuNum": 4
   },
   {
    "_defaultOrder": 41,
    "_isFastLaunch": false,
    "category": "Memory Optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 64,
    "name": "ml.r5.2xlarge",
    "vcpuNum": 8
   },
   {
    "_defaultOrder": 42,
    "_isFastLaunch": false,
    "category": "Memory Optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 128,
    "name": "ml.r5.4xlarge",
    "vcpuNum": 16
   },
   {
    "_defaultOrder": 43,
    "_isFastLaunch": false,
    "category": "Memory Optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 256,
    "name": "ml.r5.8xlarge",
    "vcpuNum": 32
   },
   {
    "_defaultOrder": 44,
    "_isFastLaunch": false,
    "category": "Memory Optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 384,
    "name": "ml.r5.12xlarge",
    "vcpuNum": 48
   },
   {
    "_defaultOrder": 45,
    "_isFastLaunch": false,
    "category": "Memory Optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 512,
    "name": "ml.r5.16xlarge",
    "vcpuNum": 64
   },
   {
    "_defaultOrder": 46,
    "_isFastLaunch": false,
    "category": "Memory Optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 768,
    "name": "ml.r5.24xlarge",
    "vcpuNum": 96
   },
   {
    "_defaultOrder": 47,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 16,
    "name": "ml.g5.xlarge",
    "vcpuNum": 4
   },
   {
    "_defaultOrder": 48,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 32,
    "name": "ml.g5.2xlarge",
    "vcpuNum": 8
   },
   {
    "_defaultOrder": 49,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 64,
    "name": "ml.g5.4xlarge",
    "vcpuNum": 16
   },
   {
    "_defaultOrder": 50,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 128,
    "name": "ml.g5.8xlarge",
    "vcpuNum": 32
   },
   {
    "_defaultOrder": 51,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 256,
    "name": "ml.g5.16xlarge",
    "vcpuNum": 64
   },
   {
    "_defaultOrder": 52,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 4,
    "hideHardwareSpecs": false,
    "memoryGiB": 192,
    "name": "ml.g5.12xlarge",
    "vcpuNum": 48
   },
   {
    "_defaultOrder": 53,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 4,
    "hideHardwareSpecs": false,
    "memoryGiB": 384,
    "name": "ml.g5.24xlarge",
    "vcpuNum": 96
   },
   {
    "_defaultOrder": 54,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 8,
    "hideHardwareSpecs": false,
    "memoryGiB": 768,
    "name": "ml.g5.48xlarge",
    "vcpuNum": 192
   },
   {
    "_defaultOrder": 55,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 8,
    "hideHardwareSpecs": false,
    "memoryGiB": 1152,
    "name": "ml.p4d.24xlarge",
    "vcpuNum": 96
   },
   {
    "_defaultOrder": 56,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 8,
    "hideHardwareSpecs": false,
    "memoryGiB": 1152,
    "name": "ml.p4de.24xlarge",
    "vcpuNum": 96
   },
   {
    "_defaultOrder": 57,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 32,
    "name": "ml.trn1.2xlarge",
    "vcpuNum": 8
   },
   {
    "_defaultOrder": 58,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 512,
    "name": "ml.trn1.32xlarge",
    "vcpuNum": 128
   },
   {
    "_defaultOrder": 59,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 512,
    "name": "ml.trn1n.32xlarge",
    "vcpuNum": 128
   }
  ],
  "instance_type": "ml.t3.medium",
  "kernelspec": {
   "display_name": "Python 3 (Base Python 2.0)",
   "language": "python",
   "name": "python3__SAGEMAKER_INTERNAL__arn:aws:sagemaker:us-east-1:081325390199:image/sagemaker-base-python-38"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
